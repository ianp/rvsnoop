<?xml version='1.0' encoding='utf-8'?>
<!-- Build file tested with Ant version 1.6.5. -->
<!-- $Id$ -->
<project name="rvsnoop" default="-usage" basedir=".">
  <description>Build file for rvSnoop. A TIBCO Rendezvous message viewing utility.</description>

  <property file="local.properties"/>

  <property name="version.major" value="1"/>
  <property name="version.minor" value="5"/>
  <property name="version.patch" value="0"/>
  <property name="version" value="${version.major}.${version.minor}.${version.patch}"/>

  <property name="dir.orig.bin"  value="bin"/>
  <property name="dir.orig.doc"  value="doc"/>
  <property name="dir.orig.src"  value="src"/>

  <property name="dir.build"     value="build"/>
  <property name="dir.build.bin" value="${dir.build}/bin"/>
  <property name="dir.build.doc" value="${dir.build}/doc"/>
  <property name="dir.build.lib" value="${dir.build}/lib"/>
  <property name="dir.build.src" value="${dir.build}/src"/>
  <property name="dir.build.www" value="${dir.build}/www"/>

  <property name="dir.dist"      value="dist/rvsnoop-${version}"/>
  <property name="dir.dist.bin"  value="${dir.dist}/bin"/>
  <property name="dir.dist.doc"  value="${dir.dist}/doc"/>
  <property name="dir.dist.lib"  value="${dir.dist}/lib"/>
  <property name="dir.dist.src"  value="${dir.dist}/src"/>

  <property name="file.version"  value="version.txt"/>
  <property name="file.suffix"   value=".html"/>

  <property name="report.pmd" value="pmd"/>

  <!-- Import environment variables as properties, prefixed with "env". -->
  <property environment="env"/>

  <path id="path.class">
    <!-- Define our class path first. -->
    <pathelement location="${tibco.rv}/lib/tibrvj.jar"/>
    <pathelement location="${tibco.sdk}/lib/TIBCOrt.jar"/>
    <pathelement location="${tibco.rvscript}"/>
    <pathelement location="${tibco.rvtest}"/>
    <pathelement location="${berkdb}"/>
    <pathelement location="${forms}"/>
    <pathelement location="${glazed}"/>
    <pathelement location="${looks}"/>
    <pathelement location="${xmlenc}"/>
    <pathelement location="${xom}"/>
    <!-- Append the system class path. -->
    <pathelement path="${env.java.class.path}"/>
  </path>

  <!-- Helper targets. -->

  <target name="-usage" description="Display a short help message.">
    <echo>Use "ant -projecthelp" to get a list of build targets.</echo>
    <echo>Copy build.properties to local.properties and configure your build environment.</echo>
    <echo>This will prevent your changes from being overwritten when you sync. your working folder.</echo>
  </target>

  <target name="-init" description="Set the timestamp for the build.">
    <tstamp/>
    <tstamp><format property="build.date" pattern="yyyy-MM-dd HH:mm:ss"/></tstamp>
    <tstamp><format property="build.year" pattern="yyyy"/></tstamp>
    <buildnumber/>
    <filterset id="filters">
      <filter token="version.major" value="${version.major}"/>
      <filter token="version.minor" value="${version.minor}"/>
      <filter token="version.patch" value="${version.patch}"/>
      <filter token="version"       value="${version}"/>
      <filter token="java.vendor"   value="${java.vendor}"/>
      <filter token="java.version"  value="${java.version}"/>
      <filter token="os.name"       value="${os.name}"/>
      <filter token="os.version"    value="${os.version}"/>
      <filter token="os.arch"       value="${os.arch}"/>
      <filter token="build.number"  value="${build.number}"/>
      <filter token="build.date"    value="${build.date}"/>
      <filter token="suffix"        value="${file.suffix}"/>
      <filter token="year"          value="${build.year}"/>
    </filterset>
  </target>

  <target name="cvs.update" description="Fetch the latest copy of the source code from CVS.">
      <cvspass cvsroot=":pserver:anonymous@cvs.sourceforge.net:/cvsroot/rvsn00p"/>
      <cvs command="update -P" package="rvsn00p" compression="true"
           cvsroot=":pserver:anonymous@cvs.sourceforge.net:/cvsroot/rvsn00p">
      </cvs>
  </target>

  <!-- Targets to build and package a release. -->

  <target name="prepare" depends="-init" description="Prepare the source code for compilation.">
    <mkdir dir="${dir.build.src}"/>
    <echo>Preparing the source code (replacing place-holders).</echo>
    <copy todir="${dir.build.src}" encoding="UTF-8">
      <filterset refid="filters"/>
      <fileset dir="${dir.orig.src}" includes="**/*.java"/>
    </copy>
  </target>

  <target name="compile" depends="prepare" description="Compile all of the Java class files.">
    <mkdir dir="${dir.build.bin}"/>
    <mkdir dir="${dir.build.doc}"/>
    <mkdir dir="${dir.build.lib}"/>
    <javac srcdir="${dir.build.src}" destdir="${dir.build.lib}" includes="**/*.java"
           debug="${javac.debug}" optimize="${javac.optimize}" encoding="UTF-8"
           deprecation="${javac.deprecation}" source="1.4" target="1.4">
      <classpath refid="path.class"/>
    </javac>
    <echo>Copying supporting files into the build.</echo>
    <copy todir="${dir.build.lib}">
      <filterset refid="filters"/>
      <fileset dir="${dir.orig.src}" includes="**/*.properties"/>
    </copy>
    <copy todir="${dir.build.bin}">
      <filterset refid="filters"/>
      <fileset dir="${dir.orig.bin}" includes="*.cmd, *.sh"/>
    </copy>
    <copy todir="${dir.build.bin}">
      <fileset dir="${dir.orig.bin}" includes="*.ico"/>
    </copy>
    <copy todir="${dir.build.doc}">
      <filterset refid="filters"/>
      <fileset dir="${dir.orig.doc}" includes="*.xhtml"/>
      <mapper type="glob" from="*.xhtml" to="*${file.suffix}"/>
    </copy>
    <copy todir="${dir.build.doc}">
      <filterset refid="filters"/>
      <fileset dir="${dir.orig.doc}" includes="*.css"/>
    </copy>
    <copy todir="${dir.build.doc}">
      <fileset dir="${dir.orig.doc}" includes="**/*.png, **/*.gif"/>
    </copy>
    <copy file="${file.version}" tofile="${dir.build}/${file.version}">
      <filterset refid="filters"/>
    </copy>
    <copy todir="${dir.build.lib}">
      <fileset dir="${dir.orig.src}" includes="**/*.png, **/*.gif"/>
    </copy>
  </target>

  <target name="javadoc" depends="prepare"
          description="Compile all of the Java API documentation.">
          <!-- Needs to compile first to filter the source. -->
    <mkdir dir="${dir.build.doc}"/>
    <javadoc destdir="${dir.build.doc}/api" version="true" author="true" use="true"
             access="${javadoc.access}" windowtitle="RvSnoop ${version} API Documentation">
      <doctitle><![CDATA[<h1>rvSnoop ${version}</h1>]]></doctitle>
      <bottom><![CDATA[Copyright &copy; 2002-2006 <a href="http://www.apache.org">Apache Software Foundation</a>. Copyright &copy; 2005-2006 <a href="http://ianp.org">Ian Phillips</a>.]]></bottom>
      <packageset dir="${dir.build.src}" defaultexcludes="true" includes="**"/>
      <link href="http://java.sun.com/j2se/1.4.2/docs/api" offline="${javadoc.offline}"/>
      <link href="http://www.xom.nu/apidocs" offline="${javadoc.offline}"/>
      <classpath refid="path.class"/>
    </javadoc>
  </target>

  <target name="dist.bin" depends="compile"
          description="Package all files required for a binary distribution.">
    <echo>Packaging the launch scripts.</echo>
    <mkdir dir="${dir.dist.bin}"/>
    <copy file="${dir.build}/${file.version}" todir="${dir.dist}"/>
    <copy todir="${dir.dist.bin}">
      <fileset dir="${dir.build.bin}" includes="*"/>
    </copy>
    <chmod dir="${dir.dist.bin}" includes="*.sh" perm="750"/>
    <echo>Packaging the documentation.</echo>
    <mkdir dir="${dir.dist.doc}"/>
    <mkdir dir="${dir.dist.doc}/images"/>
    <copy todir="${dir.dist.doc}">
      <fileset dir="${dir.build.doc}" includes="*${file.suffix}"/>
    </copy>
    <copy todir="${dir.dist.doc}">
      <fileset dir="${dir.build.doc}" includes="*.css"/>
    </copy>
    <copy todir="${dir.dist.doc}/images">
      <fileset dir="${dir.build.doc}/images" includes="*.png, *.gif"/>
    </copy>
    <echo>Packaging the libraries.</echo>
    <mkdir dir="${dir.dist.lib}"/>
    <jar jarfile="${dir.build.lib}/rvsnoop.jar" compress="true"
      manifestencoding="UTF-8" index="true" basedir="${dir.build.lib}"
      includes="**/*.class, **/*.png, **/*.gif, **/*.properties">
      <manifest>
        <attribute name="Implementation-Title" value="rvSnoop"/>
        <attribute name="Implementation-Version" value="${version}"/>
        <attribute name="Implementation-Vendor" value="Ã–rjan Lundberg &amp; Ian Phillips"/>
        <attribute name="Implementation-URL" value="http://rvsn00p.sf.net"/>
        <attribute name="Main-Class" value="rvsnoop.StartRvSnooper"/>
      </manifest>
    </jar>
    <taskdef resource="proguard/ant/task.properties" classpath="${proguard}"/>
    <!-- Ignore warnings is there to skip classes referenced by XOM's -->
    <!-- test suite but not actually used by the application.-->
    <proguard obfuscate="false" warn="false" ignorewarnings="true" printusage="${dir.build}/proguardusage.txt">
      <injar>
        <pathelement location="${dir.build.lib}/rvsnoop.jar"/>
        <pathelement location="${berkdb}"/>
        <pathelement location="${forms}"/>
        <pathelement location="${glazed}"/>
        <pathelement location="${xmlenc}"/>
        <pathelement location="${xom}"/>
      </injar>
      <outjar file="${dir.dist.lib}"/>
      <libraryjar>
        <pathelement location="${java.lib}"/>
        <pathelement location="${tibco.rv}/lib/tibrvj.jar"/>
        <pathelement location="${tibco.sdk}/lib/TIBCOrt.jar"/>
        <pathelement location="${tibco.rvscript}"/>
        <pathelement location="${tibco.rvtest}"/>
      </libraryjar>
      <keep name="*" implements="java.io.Serializable">
        <field access="private" type="long" name="serialVersionUID"/>
      </keep>
      <keep name="rvsnoop.StartRvSnooper">
        <method access="public static" type="void" name="main" parameters="java.lang.String[]"/>
      </keep>
      <keep name="rvsnoop.AeMsgTreeNode">
        <constructor access="public" parameters="com.tibco.tibrv.TibrvMsg"/>
      </keep>
      <keep name="rvsnoop.*" extends="rvsnoop.Marshaller$Implementation">
        <method access="public" type="java.lang.String" name="getName" parameters=""/>
        <method access="public" type="java.lang.String" name="marshal" parameters="java.lang.String,com.tibco.tibrv.TibrvMsg"/>
        <method access="public" type="com.tibco.tibrv.TibrvMsg" name="unmarshal" parameters="java.lang.String"/>
      </keep>
      <keep name="rvsnoop.ui.MultiLineToolTipUI">
        <method access="public static" type="javax.swing.plaf.ComponentUI" name="createUI" parameters="javax.swing.JComponent"/>
      </keep>
    </proguard>
    <!-- Almost eveything in Swing PLAFs is loaded dynamically, so just copy it all. -->
    <copy file="${looks}" todir="${dir.dist.lib}"/>
    <echo>Packaging the binary distributable.</echo>
    <tar destfile="rvsnoop-${version}-bin.tar">
      <tarfileset dir="${dir.dist}/.." mode="440" dirmode="750">
        <include name="**/*.*"/>
        <include name="rvsnoop-${version}/${file.version}"/>
        <exclude name="rvsnoop-${version}/bin/*.cmd"/>
        <exclude name="rvsnoop-${version}/bin/*.sh"/>
      </tarfileset>
      <tarfileset dir="${dir.dist}/.." mode="640">
        <include name="rvsnoop-${version}/bin/*.cmd"/>
      </tarfileset>
      <tarfileset dir="${dir.dist}/.." mode="750">
        <include name="rvsnoop-${version}/bin/*.sh"/>
      </tarfileset>
    </tar>
    <gzip destfile="rvsnoop-${version}-bin.tgz" src="rvsnoop-${version}-bin.tar"/>
    <delete file="rvsnoop-${version}-bin.tar"/>
  </target>

  <target name="dist" depends="dist.bin, javadoc, analyze"
          description="Package all files required for a source distributions.">
    <echo>Packaging the API documentation.</echo>
    <copy file="${dir.build.doc}/${report.pmd}${file.suffix}" todir="${dir.dist.doc}"/>
    <jar jarfile="${dir.dist.doc}/rvsnoop-api.jar" basedir="${dir.build.doc}/api"
         includes="**/*.*" compress="true"/>
    <echo>Packaging the source code.</echo>
    <mkdir dir="${dir.dist.src}"/>
    <jar jarfile="${dir.dist.src}/rvsnoop-src.jar" basedir="${dir.build.src}"
         includes="**/*.java" compress="true"/>
    <echo>Packaging the source distributable.</echo>
    <tar destfile="rvsnoop-${version}-src.tar">
      <tarfileset dir="${dir.dist}/.." mode="440" dirmode="750">
        <include name="**/*.*"/>
        <include name="rvsnoop-${version}/${file.version}"/>
        <exclude name="rvsnoop-${version}/bin/*.cmd"/>
        <exclude name="rvsnoop-${version}/bin/*.sh"/>
      </tarfileset>
      <tarfileset dir="${dir.dist}/.." mode="640">
        <include name="rvsnoop-${version}/bin/*.cmd"/>
      </tarfileset>
      <tarfileset dir="${dir.dist}/.." mode="750">
        <include name="rvsnoop-${version}/bin/*.sh"/>
      </tarfileset>
    </tar>
    <gzip destfile="rvsnoop-${version}-src.tgz" src="rvsnoop-${version}-src.tar"/>
    <delete file="rvsnoop-${version}-src.tar" />
  </target>

  <target name="-release.confirm" depends="dist"
    description="Upload the files to SourceForge ready for releasing.">
    <input addproperty="release.confirm">Have you remembered to increment Version.class?</input>
  </target>

  <target name="release" depends="-release.confirm" if="release.confirm"
    description="Upload the files to SourceForge ready for releasing.">
    <input addproperty="release.email">Enter the email address to use for anonymous FTP:</input>
    <ftp server="upload.sourceforge.net" userid="anonymous" binary="true" password="${release.email}">
      <fileset>
        <include name="rvsnoop-${version}-bin.tgz"/>
        <include name="rvsnoop-${version}-src.tgz"/>
      </fileset>
    </ftp>
  </target>

  <!-- Targets to manage the web pages on SourceForge. -->

  <target name="web.compile" depends="-init"
    description="Prepare the files that make up the web site.">
    <!-- TODO: Add in the PMD report once it has been nicely formatted. -->
    <copy todir="${dir.build.www}">
      <fileset dir="${dir.orig.doc}">
        <include name="*.xhtml"/>
        <exclude name="license.xhtml"/>
        <exclude name="readme.xhtml"/>
      </fileset>
      <filterset refid="filters"/>
      <!-- This mapper is needed because we are changing the file suffix. -->
      <!-- This is a sourceforge limitation, we have to live with it...   -->
      <mapper type="glob" from="*.xhtml" to="*.html"/>
    </copy>
    <copy file="${file.version}" todir="${dir.build.www}">
      <filterset refid="filters"/>
    </copy>
    <copy todir="${dir.build.www}">
      <fileset dir="${dir.orig.doc}" includes="*.css"/>
      <fileset dir="${dir.orig.doc}" includes="**/*.png, **/*.gif"/>
    </copy>
  </target>

  <target name="web.publish" depends="web.compile"
    description="Publish the files to the web server.">
    <input addproperty="ssh.user">Enter your SSH username:</input>
    <input addproperty="ssh.pass">Enter your SSH password:</input>
    <scp todir="${ssh.user}@rvsnoop.org:/users/home/iphillips/domains/rvsnoop.org/web/public"
      password="${ssh.pass}" trust="false">
      <fileset dir="${dir.build.www}">
        <include name="*.html"/>
        <include name="*.css"/>
        <include name="*.txt"/>
      </fileset>
    </scp>
    <scp todir="${ssh.user}@rvsnoop.org:/users/home/iphillips/domains/rvsnoop.org/web/public/images"
      password="${ssh.pass}" trust="false">
      <fileset dir="${dir.build.www}/images">
        <include name="*.gif"/>
        <include name="*.png"/>
      </fileset>
    </scp>
  </target>

  <!-- Static analysis & report generation. -->

  <target name="analyze" depends="prepare" description="Analyze the code base and generate reports.">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpath="${pmd}"/>
    <pmd shortFilenames="true">
      <ruleset>rvsnoop.pmd</ruleset>
      <formatter type="html" toFile="${dir.build.doc}/${report.pmd}${file.suffix}"/>
      <fileset dir="${dir.build.src}" includes="**/*.java"/>
    </pmd>
  </target>

  <!-- Targets to clean up the workspace. -->

  <target name="clean" description="Remove all of the generated files (build only).">
    <delete dir="${dir.build}/"/>
  </target>

  <target name="cleanall" depends="clean"
    description="Remove all of the generated files (build &amp; distribution).">
    <delete dir="${dir.dist}"/>
    <delete dir="${dir.dist}/.."/>
    <delete file="rvsnoop-${version}-src.tgz"/>
    <delete file="rvsnoop-${version}-bin.tgz"/>
  </target>

</project>
